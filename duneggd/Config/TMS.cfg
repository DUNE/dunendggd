[TMS]
class 	= 	duneggd.SubDetector.TMS.tmsBuilder
mat   	= 	"SteelTMS"
#for 7m width
thinbox1Dimension = [Q('1.850m'),Q('4.7m'),Q('0.015m')]
#for 6m width 
#thinbox1Dimension = [Q('1.4575m'),Q('4.7m'),Q('0.015m')]

#thinbox2Dimension = [Q('3.498m'),Q('5.022m'),Q('0.015m')]  # #remnant from old geometry version with two different steel plate widths (outer and inner)
gapPosition =  [Q('0.020m'),Q('0m'),Q('0m')]
BFieldUpLow = '(0 T, -1.4 T, 0 T)'#(0 T,3 T,0 T)
BFieldUpHigh = '(0.0 T, -1.4 T, 0 T)'#(0.0 T, 5.5 T, 0 T)
BFieldDownLow = '(0 T, 1.4 T, 0 T)'#(0 T, -3 T, 0 T)
BFieldDownHigh = '(0.0 T,  1.4 T, 0 T)'#(0.0 T, -5.5 T, 0 T)


Module_layers_thin=34
Module_layers_thick=22
Module_layers_double=25

# c,d geometries
thin_horizontal = [1, 4, 7, 14, 21, 28]
thick_horizontal  = [0, 7, 14,21] 
double_horizontal = [6, 13,20,24]
thin_U    = [2, 5, 8, 10, 12, 15, 17, 19, 22, 24, 26, 29, 31, 33]
thick_U   = [1, 3, 5, 8, 10, 12, 15, 17, 19,22]
double_U  = [0, 2, 4, 7, 9, 11, 14, 16, 18,21,23]
thin_V    = [3, 6, 9, 11, 13, 16, 18, 20, 23, 25, 27, 30, 32, 34]
thick_V   = [2, 4, 6, 9, 11, 13, 16, 18, 20]
double_V  = [1, 3, 5, 8, 10, 12, 15, 17,19,  22]



#Script to print module layer configuration summary with computed indices.
#"""
#
#def compute_ordinals(pattern, thin_count, thick_count, double_count, thin_offset=1):
#    orientations = [c for c in pattern if c in ("U", "V", "X")]
#    thick_offset  = thin_offset + thin_count
#    double_offset = thick_offset + thick_count
#    thin_seg   = orientations[thin_offset : thin_offset + thin_count]
#    thick_seg  = orientations[thick_offset : thick_offset + thick_count]
#    double_seg = orientations[double_offset : double_offset + double_count]
#    thin_ord   = list(range(1, thin_count + 1))
#    thick_ord  = list(range(1, thick_count + 1))
#    double_ord = list(range(1, double_count + 1))
#    def extract(ord_list, seg, orient):
#        return [i for i, o in zip(ord_list, seg) if o == orient]
#    return {
#        "thin_horizontal":   extract(thin_ord,   thin_seg,   "X"),
#        "thin_U":            extract(thin_ord,   thin_seg,   "U"),
#        "thin_V":            extract(thin_ord,   thin_seg,   "V"),
#        "thick_horizontal":  extract(thick_ord,  thick_seg,  "X"),
#        "thick_U":           extract(thick_ord,  thick_seg,  "U"),
#        "thick_V":           extract(thick_ord,  thick_seg,  "V"),
#        "double_horizontal": extract(double_ord, double_seg, "X"),
#        "double_U":          extract(double_ord, double_seg, "U"),
#        "double_V":          extract(double_ord, double_seg, "V"),
#    }
#
#def print_module_config(thin, thick, double, start_index=17):
#    pattern = "VXS" + "USVSXS"*2 + "USVSUSVSUSVSXS"*10 + "USVSXS"
#    res = compute_ordinals(pattern, thin, thick, double, thin_offset=1)
#    entries = [
#        (f"Module_layers_thin={thin}"),
#        (f"Module_layers_thick={thick}"),
#        (f"Module_layers_double={double}"),
#        ("# c,d geometries"),
#        (""),
#        (f"thin_horizontal = {res['thin_horizontal']}"),
#        (f"thick_horizontal  = {res['thick_horizontal']}"),
#        (f"double_horizontal = {res['double_horizontal']}"),
#        (f"thin_U    = {res['thin_U']}"),
#        (f"thick_U   = {res['thick_U']}"),
#        (f"double_U  = {res['double_U']}"),
#        (f"thin_V    = {res['thin_V']}"),
#        (f"thick_V   = {res['thick_V']}"),
#        (f"double_V  = {res['double_V']}"),
#    ]
#    for fname, idx, text in entries:
#        print(f"{fname:<25} | {idx:2} {text}")
