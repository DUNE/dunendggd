[TMS]
class 	= 	duneggd.SubDetector.TMS.tmsBuilder
mat   	= 	"SteelTMS"
#for 7m width
thinbox1Dimension = [Q('1.850m'),Q('4.7m'),Q('0.015m')]
#for 6m width 
#thinbox1Dimension = [Q('1.4575m'),Q('4.7m'),Q('0.015m')]
#thinbox1Dimension = [Q('1.850m'),Q('4.7m'),Q('0.015m')]
#thinbox2Dimension = [Q('3.498m'),Q('5.022m'),Q('0.015m')]  # #remnant from old geometry version with two different steel plate widths (outer and inner)
gapPosition =  [Q('0.020m'),Q('0m'),Q('0m')]
BFieldUpLow = '(0 T, -1.4 T, 0 T)'#(0 T,3 T,0 T)
BFieldUpHigh = '(0.0 T, -1.4 T, 0 T)'#(0.0 T, 5.5 T, 0 T)
BFieldDownLow = '(0 T, 1.4 T, 0 T)'#(0 T, -3 T, 0 T)
BFieldDownHigh = '(0.0 T,  1.4 T, 0 T)'#(0.0 T, -5.5 T, 0 T)


Module_layers_thin=34
Module_layers_thick=22
Module_layers_double=24
# c,d geometries

thin_horizontal = [1, 4, 7, 14, 21, 28]
thick_horizontal  = [1, 8, 15]
double_horizontal = [0, 7, 14, 21]
thin_U    = [2, 5, 8, 10, 12, 15, 17, 19, 22, 24, 26, 29, 31, 33]
thick_U   = [2, 4, 6, 9, 11, 13, 16, 18, 20]
double_U  = [1, 3, 5, 8, 10, 12, 15, 17, 19, 22]
thin_V    = [3, 6, 9, 11, 13, 16, 18, 20, 23, 25, 27, 30, 32, 34]
thick_V   = [0, 3, 5, 7, 10, 12, 14, 17, 19, 21]
double_V  = [2, 4, 6, 9, 11, 13, 16, 18, 20, 23]



## 1) Build the raw pattern and drop 'S'
#pattern = "VXS" + "USVSXS"*2 + "USVSUSVSUSVSXS"*10 + "USVSXS"
#orientations = [c for c in pattern if c in ("U", "V", "X")]
#
## 2) Define your layer counts and offset for thin
#thin_count, thick_count, double_count = 34, 22, 24
#thin_offset = 1  # skip the very first V
#
## 3) Calculate slice offsets
#thick_offset  = thin_offset + thin_count
#double_offset = thick_offset + thick_count
#
## 4) Slice out each block
#thin_seg   = orientations[thin_offset : thin_offset + thin_count]
#thick_seg  = orientations[thick_offset : thick_offset + thick_count]
#double_seg = orientations[double_offset : double_offset + double_count]
#
## 5) Build ordinal lists
#thin_ord   = list(range(1, thin_count + 1))
#thick_ord  = list(range(1, thick_count + 1))
#double_ord = list(range(1, double_count + 1))
#
## 6) Helper to extract ordinal indices by orientation
#def extract(ord_list, seg, orient):
#    return [i for i, o in zip(ord_list, seg) if o == orient]
#
## 7) Compute all nine lists
#thin_horizontal   = extract(thin_ord,   thin_seg,   "X")
#thin_U            = extract(thin_ord,   thin_seg,   "U")
#thin_V            = extract(thin_ord,   thin_seg,   "V")
#thick_horizontal  = extract(thick_ord,  thick_seg,  "X")
#thick_U           = extract(thick_ord,  thick_seg,  "U")
#thick_V           = extract(thick_ord,  thick_seg,  "V")
#double_horizontal = extract(double_ord, double_seg, "X")
#double_U          = extract(double_ord, double_seg, "U")
#double_V          = extract(double_ord, double_seg, "V")
#
## 8) Print results
#print("thin_horizontal =", thin_horizontal)
#print("thick_horizontal =", thick_horizontal)
#print("double_horizontal =", double_horizontal)
#print("thin_U           =", thin_U)
#print("thick_U          =", thick_U)
#print("double_U         =", double_U)
#print("thin_V           =", thin_V)
#print("thick_V          =", thick_V)
#print("double_V         =", double_V)
